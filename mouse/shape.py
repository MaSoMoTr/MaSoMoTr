import math
import numpy as np
import PIL.Image
import PIL.ImageDraw


def shape_to_mask(img_shape, points, shape_type=None,
                  line_width=10, point_size=5):
    """Generate an instance mask from a set of points
    Args:
        img_shape: Size of mask (height, width)
        points: [[x1,y1],[x2,y2],....]
        shape_type: str ('circle', 'rectangle', 'line', 'linestrip', 'point')
        line_width: int
        point_size: int
    Returns: 
        mask: A bool array of shape [height, width]
    """

    mask = np.zeros(img_shape[:2], dtype=np.uint8)
    mask = PIL.Image.fromarray(mask)
    draw = PIL.ImageDraw.Draw(mask)
    xy = [tuple(point) for point in points]
    if shape_type == 'circle':
        assert len(xy) == 2, 'Shape of shape_type=circle must have 2 points'
        (cx, cy), (px, py) = xy
        d = math.sqrt((cx - px) ** 2 + (cy - py) ** 2)
        draw.ellipse([cx - d, cy - d, cx + d, cy + d], outline=1, fill=1)
    elif shape_type == 'rectangle':
        assert len(xy) == 2, 'Shape of shape_type=rectangle must have 2 points'
        draw.rectangle(xy, outline=1, fill=1)
    elif shape_type == 'line':
        assert len(xy) == 2, 'Shape of shape_type=line must have 2 points'
        draw.line(xy=xy, fill=1, width=line_width)
    elif shape_type == 'linestrip':
        draw.line(xy=xy, fill=1, width=line_width)
    elif shape_type == 'point':
        assert len(xy) == 1, 'Shape of shape_type=point must have 1 points'
        cx, cy = xy[0]
        r = point_size
        draw.ellipse([cx - r, cy - r, cx + r, cy + r], outline=1, fill=1)
    else:
        assert len(xy) > 2, 'Polygon must have points more than 2'
        draw.polygon(xy=xy, outline=1, fill=1)
    mask = np.array(mask, dtype=bool)
    return mask


def shapes_to_labels_masks(img_shape, shapes, label_name_to_value):
    """Converting shapes in json generated by Labelme to masks and class ids
    Args:
        img_shape: Size of mask (height, width)
        shapes: list of labels and points  [{"label":"mouse", "points": [[x1,y1], [x2,y2]...]},
                                               {"label":"cat", "points": [[x11,y11], [x22,y22]...]},...]
        label_name_to_value: Dictionary of labels and its encoded values  {"BG": 0, "mouse":1, "cat": 2}
    Returns:
        class_ids: a 1D array of class IDs of the instance masks.
        ins: A bool array of shape [height, width, instance count] with
                a binary mask per instance.
    """

    ins = np.zeros((img_shape[0], img_shape[1], len(shapes)), dtype=np.int32)

    for count, shape in enumerate(shapes):
        points = shape['points']

        shape_type = shape.get('shape_type', None)
        mask = shape_to_mask(img_shape, points, shape_type)
        ins[mask, count] = 1

    class_ids = np.array([label_name_to_value[shape['label']] for shape in shapes], dtype=np.int32)
    return class_ids, ins
